name: build engine for pi4

on:
  push:
    branches: [ ci ]
  pull_request:
    branches: [ ci ]
  repository_dispatch:
  workflow_dispatch:
  workflow_call:
  
jobs:
  populate-engine-src-cache:
    name: 'Prepopulate engine source cache'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      
      - run: |
          echo github.ref: ${{ github.ref }}

      - name: Read stable engine version
        id: engine-version-stable

        # Read the engine.version.stable file and trim away anything that's not a hex digit
        # (So we don't include whitespace in the output variable, if that's possible)
        run: echo ::set-output name=hash::$(cat engine.version.stable | tr -dc [:xdigit:])
      
      - name: Log stable engine version
        run: |
          echo stable engine version: "${{ steps.engine-version-stable.outputs.hash }}"
      
      - name: Create engine cache stamp dir
        shell: bash
        run: |
          mkdir -p engine-cache-stamp

      - uses: actions/cache@v3
        id: stamp-cache
        with:
          path: engine-cache-stamp
          key: engine-cache-stamp-${{ steps.engine-version-stable.outputs.hash }}

      - name: Log cache hit
        shell: bash
        run: |
          echo cache hit? ${{ steps.stamp-cache.outputs.cache-hit }}

      - uses: actions/cache@v3
        id: cache
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        with:
          path: engine
          key: engine-${{ steps.engine-version-stable.outputs.hash }}

      - name: Setup environment variables
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          # echo DEPOT_TOOLS_UPDATE=0 >> $GITHUB_ENV
          echo GCLIENT_PY3=1 >> $GITHUB_ENV
          echo $PATH
          
      - name: Clone depot tools
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $GITHUB_WORKSPACE/depot_tools
          echo $GITHUB_WORKSPACE/depot_tools >> $GITHUB_PATH
      
      - name: Setup environment variables
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          # echo DEPOT_TOOLS_UPDATE=0 >> $GITHUB_ENV
          echo GCLIENT_PY3=1 >> $GITHUB_ENV
          echo $PATH
          echo is-host: ${{ inputs.is-host }}
          
      - name: Setup gclient
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          gclient --version
          echo DEPOT_TOOLS_UPDATE=0 >> $GITHUB_ENV
          
      - name: Bootstrap engine environment
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          mkdir -p engine
          echo 'solutions = [{ "managed": False, "name": "src/flutter", "url": "https://github.com/flutter/engine.git", "deps_file": "DEPS", "custom_vars":{ "download_linux_deps": True, "download_android_deps": False}, },]' > engine/.gclient
      
      - name: Install engine sources
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: engine
        run: |
          gclient sync --revision src/flutter@${{ steps.engine-version-stable.outputs.hash }} -R -D
      
      - name: Install linux arm sysroot
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: engine
        run: |
          ./src/build/linux/sysroot_scripts/install-sysroot.py --arch=arm

      - name: Prune git history
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: engine
        run: |
          for FILE in $(find . -type d -name .git)
          do
            pushd "$FILE/.."
            git rev-parse HEAD > .git/shallow
            git tag -d $(git tag -l) || true
            for ref in $(git for-each-ref --format="%(refname)")
            do
              git update-ref -d "$ref"
            done
            git remote remove origin
            git reflog expire --expire=all --all
            git gc --prune=all
            popd
          done
      
  pi4-debug:
    name: 'Build and deploy flutter engine for Raspberry Pi 4 (32-bit, debug mode).'
    runs-on: ubuntu-latest
    needs: populate-engine-src-cache
       
    steps:
      - uses: actions/checkout@v1
      
      - name: Read stable engine version
        id: engine-version-stable
        run: echo ::set-output name=hash::$(cat engine.version.stable)
        
      - name: Test output
        run: echo ${{ steps.engine-version-stable.outputs.hash }}
      
      - name: build engine
        uses: ./.github/actions/build-engine
        with:
          ref: "${{ steps.engine-version-stable.outputs.hash  }}"
          is-host: false
          runtime-mode: debug
          os: linux
          cpu: arm
          additional-gn-args: '--embedder-for-target --disable-desktop-embeddings --no-build-glfw-shell --no-build-embedder-examples --no-goma'
          additional-raw-gn-args: 'arm_tune = "cortex-a72+crc+crypto"'
      
      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.engine-version-stable.outputs.hash }}-pi4-debug
          path: |
            ${{ github.workspace }}/engine/src/out/build/libflutter_engine.so
            ${{ github.workspace }}/engine/src/out/build/icudtl.dat
            ${{ github.workspace }}/engine/src/out/build/flutter_embedder.h
    
  pi4-profile:
    name: 'Build and deploy flutter engine for Raspberry Pi 4 (32-bit, profile mode).'
    runs-on: ubuntu-latest
    needs: populate-engine-src-cache

    steps:
      - uses: actions/checkout@v1
      
      - name: Read stable engine version
        id: engine-version-stable
        run: echo ::set-output name=hash::$(cat engine.version.stable)
        
      - name: build engine
        uses: ./.github/actions/build-engine
        with:
          ref: "${{ steps.engine-version-stable.outputs.hash  }}"
          is-host: false
          runtime-mode: profile
          os: linux
          cpu: arm
          additional-gn-args: '--embedder-for-target --disable-desktop-embeddings --no-build-glfw-shell --no-build-embedder-examples --no-goma'
          additional-raw-gn-args: 'arm_tune = "cortex-a72+crc+crypto"'
          
      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.engine-version-stable.outputs.hash }}-pi4-profile
          path: |
            ${{ github.workspace }}/engine/src/out/build/libflutter_engine.so
            ${{ github.workspace }}/engine/src/out/build/icudtl.dat
            ${{ github.workspace }}/engine/src/out/build/flutter_embedder.h
            ${{ github.workspace }}/engine/src/out/build/clang_x64/gen_snapshot
  
  pi4-release:
    name: 'Build and deploy flutter engine for Raspberry Pi 4 (32-bit, release mode).'
    runs-on: ubuntu-latest
    needs: populate-engine-src-cache
    
    steps:
      - uses: actions/checkout@v1
      
      - name: Read stable engine version
        id: engine-version-stable
        run: echo ::set-output name=hash::$(cat engine.version.stable)
        
      - name: build engine (armv7 hard-float release)
        uses: ./.github/actions/build-engine
        with:
          ref: "${{ steps.engine-version-stable.outputs.hash  }}"
          is-host: false
          runtime-mode: release
          os: linux
          cpu: arm
          additional-gn-args: '--embedder-for-target --disable-desktop-embeddings --no-build-glfw-shell --no-build-embedder-examples --no-goma'
          additional-raw-gn-args: 'arm_tune = "cortex-a72+crc+crypto"'
          
      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.engine-version-stable.outputs.hash }}-pi4-release
          path: |
            ${{ github.workspace }}/engine/src/out/build/libflutter_engine.so
            ${{ github.workspace }}/engine/src/out/build/icudtl.dat
            ${{ github.workspace }}/engine/src/out/build/flutter_embedder.h
            ${{ github.workspace }}/engine/src/out/build/clang_x64/gen_snapshot

  release:
    name: 'Publish release'
    runs-on: ubuntu-latest
    needs: [pi4-debug, pi4-profile, pi4-release]
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Read stable engine version
        id: engine-version-stable
        run: echo ::set-output name=hash::$(cat engine.version.stable)
        
      - name: Check if theres a tag for this commit
        id: check-tag
        run: |
          git status
          git log -n 1
          git tag --points-at HEAD
          git tag --points-at HEAD | wc -l
          if [ $(git tag --points-at HEAD | wc -l) -ne 0 ]; then
            echo is tagged
            echo '::set-output name=has-tag::true'
          else
            echo is untagged
            echo '::set-output name=has-tag::false'
          fi
          echo step output: ${{ steps.check-tag.ouputs.has-tag }}
      
      - run: |
          echo "has tag: ${{ steps.check-tag.outputs.has-tag }}"
      
      - uses: actions/download-artifact@v3
        if: ${{ steps.check-tag.outputs.has-tag == 'true' }}
        with:
          name: ${{ steps.engine-version-stable.outputs.hash }}-pi4-debug
          path: pi4-debug
        
      - uses: actions/download-artifact@v3
        if: ${{ steps.check-tag.outputs.has-tag == 'true' }}
        with:
          name: ${{ steps.engine-version-stable.outputs.hash }}-pi4-profile
          path: pi4-profile
        
      - uses: actions/download-artifact@v3
        if: ${{ steps.check-tag.outputs.has-tag == 'true' }}
        with:
          name: ${{ steps.engine-version-stable.outputs.hash }}-pi4-release
          path: pi4-release
    
      - uses: softprops/action-gh-release@v0.1.14
        if: ${{ steps.check-tag.outputs.has-tag == 'true' }}
        with:
          files: |
            pi4-debug
            pi4-profile
            pi4-release
    
    
    
